// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Interface Mapped Types snapshots interface mapper generation 1`] = `
"import { GraphQLResolveInfo } from "graphql";
import { Context } from "./context";
import { IdentifiableEntity, PublisherEntity } from "./entities";

export interface Resolvers {
  Query: QueryResolvers;
  SmallPublisher?: SmallPublisherResolvers;
  LargePublisher?: LargePublisherResolvers;
  Book?: BookResolvers;
  Magazine?: MagazineResolvers;
}

export interface PublisherResolvers<T> {
  name: Resolver<T, {}, string | null | undefined>;
  country: Resolver<T, {}, string | null | undefined>;
}

export interface IdentifiableResolvers<T> {
  id: Resolver<T, {}, string>;
}

export type PublisherTypes = SmallPublisher | LargePublisher;

export type IdentifiableTypes = LargePublisher;

export type UnionResolvers = {
  Publisher: { __resolveType(o: SmallPublisher | LargePublisher): string };
  Identifiable: { __resolveType(o: LargePublisher): string };
};

export interface QueryResolvers {
  publishers: Resolver<{}, {}, ReadonlyArray<PublisherEntity>>;
  identifiableItems: Resolver<{}, {}, ReadonlyArray<IdentifiableEntity>>;
  getPublisher: Resolver<{}, QueryGetPublisherArgs, PublisherEntity | null | undefined>;
  books: Resolver<{}, {}, readonly Book[]>;
}

export interface SmallPublisherResolvers extends PublisherResolvers<SmallPublisher> {
  employees: Resolver<SmallPublisher, {}, number | null | undefined>;
}

export interface LargePublisherResolvers
  extends PublisherResolvers<LargePublisher>, IdentifiableResolvers<LargePublisher> {
  revenue: Resolver<LargePublisher, {}, number | null | undefined>;
  subsidiaries: Resolver<LargePublisher, {}, readonly string[]>;
}

export interface BookResolvers {
  title: Resolver<Book, {}, string>;
  publisher: Resolver<Book, {}, PublisherEntity | null | undefined>;
  isbn: Resolver<Book, {}, string>;
}

export interface MagazineResolvers {
  title: Resolver<Magazine, {}, string>;
  publisher: Resolver<Magazine, {}, PublisherEntity>;
  issueNumber: Resolver<Magazine, {}, number>;
}

type MaybePromise<T> = T | Promise<T>;
export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: GraphQLResolveInfo) => MaybePromise<T>;

export type SubscriptionResolverFilter<R, A, T> = (
  root: R | undefined,
  args: A,
  ctx: Context,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;
export type SubscriptionResolver<R, A, T> = {
  subscribe: (root: R | undefined, args: A, ctx: Context, info: GraphQLResolveInfo) => AsyncIterator<T>;
};

export interface QueryGetPublisherArgs {
  id: string;
}
export interface SmallPublisher {
  name: string | null | undefined;
  country: string | null | undefined;
  employees: number | null | undefined;
}

export interface LargePublisher {
  id: string;
  name: string | null | undefined;
  country: string | null | undefined;
  revenue: number | null | undefined;
  subsidiaries: string[];
}

export interface Book {
  title: string;
  publisher: PublisherEntity | null | undefined;
  isbn: string;
}

export interface Magazine {
  title: string;
  publisher: PublisherEntity;
  issueNumber: number;
}
"
`;
