// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Enum Types snapshots enum generation 1`] = `
"import { GraphQLResolveInfo } from "graphql";
import { Context } from "./context";
import { PriorityEnum, StatusEnum } from "./enums";

export interface Resolvers {
  Query: QueryResolvers;
  User?: UserResolvers;
}

export type UnionResolvers = {};

export interface QueryResolvers {
  users: Resolver<{}, QueryUsersArgs, readonly User[]>;
  usersByStatuses: Resolver<{}, QueryUsersByStatusesArgs, readonly User[]>;
}

export interface UserResolvers {
  id: Resolver<User, {}, string>;
  name: Resolver<User, {}, string>;
  status: Resolver<User, {}, StatusEnum>;
  role: Resolver<User, {}, UserRole>;
  priority: Resolver<User, {}, PriorityEnum | null | undefined>;
}

type MaybePromise<T> = T | Promise<T>;
export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: GraphQLResolveInfo) => MaybePromise<T>;

export type SubscriptionResolverFilter<R, A, T> = (
  root: R | undefined,
  args: A,
  ctx: Context,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;
export type SubscriptionResolver<R, A, T> = {
  subscribe: (root: R | undefined, args: A, ctx: Context, info: GraphQLResolveInfo) => AsyncIterator<T>;
};

export interface QueryUsersArgs {
  status?: StatusEnum | null | undefined;
  role?: UserRole | null | undefined;
}
export interface QueryUsersByStatusesArgs {
  statuses: readonly StatusEnum[];
}
export interface User {
  id: string;
  name: string;
  status: StatusEnum;
  role: UserRole;
  priority: PriorityEnum | null | undefined;
}

export interface UserInput {
  name: string;
  status?: StatusEnum | null | undefined;
  role: UserRole;
  priority?: PriorityEnum | null | undefined;
}

export { StatusEnum } from "./enums";

export { PriorityEnum } from "./enums";

export enum UserRole {
  Guest = "GUEST",
  User = "USER",
  Moderator = "MODERATOR",
  Admin = "ADMIN",
}
"
`;
