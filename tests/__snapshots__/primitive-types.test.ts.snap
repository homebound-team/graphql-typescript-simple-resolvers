// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Primitive Type Handling snapshots primitive type generation 1`] = `
"import { GraphQLResolveInfo } from "graphql";
import { Context } from "./context";

export interface Resolvers {
  Query: QueryResolvers;
  Mutation: MutationResolvers;
  User?: UserResolvers;
}

export type UnionResolvers = {};

export interface QueryResolvers {
  userById: Resolver<{}, QueryUserByIdArgs, User | null | undefined>;
  userByName: Resolver<{}, QueryUserByNameArgs, User | null | undefined>;
  usersByAge: Resolver<{}, QueryUsersByAgeArgs, readonly User[]>;
  usersByHeight: Resolver<{}, QueryUsersByHeightArgs, readonly User[]>;
  activeUsers: Resolver<{}, QueryActiveUsersArgs, readonly User[]>;
  searchUsers: Resolver<{}, QuerySearchUsersArgs, readonly User[]>;
}

export interface MutationResolvers {
  updateUser: Resolver<{}, MutationUpdateUserArgs, User>;
}

export interface UserResolvers {
  name: Resolver<User, {}, string>;
  nickname: Resolver<User, {}, string | null | undefined>;
  bio: Resolver<User, {}, string | null | undefined>;
  id: Resolver<User, {}, string>;
  externalId: Resolver<User, {}, string | null | undefined>;
  age: Resolver<User, {}, number>;
  score: Resolver<User, {}, number | null | undefined>;
  ranking: Resolver<User, {}, number | null | undefined>;
  height: Resolver<User, {}, number>;
  weight: Resolver<User, {}, number | null | undefined>;
  rating: Resolver<User, {}, number | null | undefined>;
  isActive: Resolver<User, {}, boolean>;
  isVerified: Resolver<User, {}, boolean | null | undefined>;
  hasProfile: Resolver<User, {}, boolean | null | undefined>;
}

type MaybePromise<T> = T | Promise<T>;
export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: GraphQLResolveInfo) => MaybePromise<T>;

export type SubscriptionResolverFilter<R, A, T> = (
  root: R | undefined,
  args: A,
  ctx: Context,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;
export type SubscriptionResolver<R, A, T> = {
  subscribe: (root: R | undefined, args: A, ctx: Context, info: GraphQLResolveInfo) => AsyncIterator<T>;
};

export interface QueryUserByIdArgs {
  id: string;
}
export interface QueryUserByNameArgs {
  name: string;
}
export interface QueryUsersByAgeArgs {
  minAge: number;
  maxAge?: number | null | undefined;
}
export interface QueryUsersByHeightArgs {
  minHeight?: number | null | undefined;
  maxHeight?: number | null | undefined;
}
export interface QueryActiveUsersArgs {
  isActive: boolean;
}
export interface QuerySearchUsersArgs {
  name?: string | null | undefined;
  minAge?: number | null | undefined;
  isActive?: boolean | null | undefined;
}
export interface MutationUpdateUserArgs {
  id: string;
  name?: string | null | undefined;
  age?: number | null | undefined;
  isActive?: boolean | null | undefined;
}
export interface User {
  name: string;
  nickname: string | null | undefined;
  bio: string | null | undefined;
  id: string;
  externalId: string | null | undefined;
  age: number;
  score: number | null | undefined;
  ranking: number | null | undefined;
  height: number;
  weight: number | null | undefined;
  rating: number | null | undefined;
  isActive: boolean;
  isVerified: boolean | null | undefined;
  hasProfile: boolean | null | undefined;
}

export interface UserInput {
  name: string;
  nickname?: string | null | undefined;
  age?: number | null | undefined;
  height: number;
  isActive: boolean;
  isVerified?: boolean | null | undefined;
}
"
`;
