// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Data Transfer Objects (DTOs) snapshots DTO generation 1`] = `
"import { GraphQLResolveInfo, GraphQLScalarType } from "graphql";
import { Context } from "./context";
import { UserEntity } from "./entities";

export interface Resolvers {
  User: UserResolvers;
  Query: QueryResolvers;
  UserSummary?: UserSummaryResolvers;
  UserProfile?: UserProfileResolvers;
  UserStats?: UserStatsResolvers;
  Address?: AddressResolvers;
  UserDetails?: UserDetailsResolvers;
  Date: GraphQLScalarType;
}

export type UnionResolvers = {};

export interface UserResolvers {
  id: Resolver<UserEntity, {}, string>;
  name: Resolver<UserEntity, {}, string>;
  email: Resolver<UserEntity, {}, string>;
  createdAt: Resolver<UserEntity, {}, Date>;
}

export interface QueryResolvers {
  user: Resolver<{}, QueryUserArgs, UserEntity | null | undefined>;
  userSummary: Resolver<{}, {}, UserSummary>;
  userProfile: Resolver<{}, QueryUserProfileArgs, UserProfile | null | undefined>;
  userStats: Resolver<{}, QueryUserStatsArgs, UserStats | null | undefined>;
  userDetails: Resolver<{}, QueryUserDetailsArgs, UserDetails | null | undefined>;
}

export interface UserSummaryResolvers {
  totalUsers: Resolver<UserSummary, {}, number>;
  activeUsers: Resolver<UserSummary, {}, number>;
  inactiveUsers: Resolver<UserSummary, {}, number>;
  lastUpdated: Resolver<UserSummary, {}, Date | null | undefined>;
}

export interface UserProfileResolvers {
  name: Resolver<UserProfile, {}, string>;
  email: Resolver<UserProfile, {}, string>;
  status: Resolver<UserProfile, {}, Status>;
  profilePicture: Resolver<UserProfile, {}, string | null | undefined>;
  bio: Resolver<UserProfile, {}, string | null | undefined>;
  joinDate: Resolver<UserProfile, {}, Date | null | undefined>;
  followers: Resolver<UserProfile, {}, number | null | undefined>;
  following: Resolver<UserProfile, {}, number | null | undefined>;
}

export interface UserStatsResolvers {
  userId: Resolver<UserStats, {}, string>;
  postsCount: Resolver<UserStats, {}, number>;
  commentsCount: Resolver<UserStats, {}, number>;
  likesReceived: Resolver<UserStats, {}, number>;
  averageRating: Resolver<UserStats, {}, number | null | undefined>;
  isVerified: Resolver<UserStats, {}, boolean>;
  badges: Resolver<UserStats, {}, readonly string[]>;
  achievements: Resolver<UserStats, {}, ReadonlyArray<string | null | undefined> | null | undefined>;
}

export interface AddressResolvers {
  street: Resolver<Address, {}, string>;
  city: Resolver<Address, {}, string>;
  state: Resolver<Address, {}, string | null | undefined>;
  zipCode: Resolver<Address, {}, string>;
  country: Resolver<Address, {}, string>;
}

export interface UserDetailsResolvers {
  profile: Resolver<UserDetails, {}, UserProfile>;
  address: Resolver<UserDetails, {}, Address | null | undefined>;
  emergencyContact: Resolver<UserDetails, {}, UserProfile | null | undefined>;
}

type MaybePromise<T> = T | Promise<T>;
export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: GraphQLResolveInfo) => MaybePromise<T>;

export type SubscriptionResolverFilter<R, A, T> = (
  root: R | undefined,
  args: A,
  ctx: Context,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;
export type SubscriptionResolver<R, A, T> = {
  subscribe: (root: R | undefined, args: A, ctx: Context, info: GraphQLResolveInfo) => AsyncIterator<T>;
};

export interface QueryUserArgs {
  id: string;
}
export interface QueryUserProfileArgs {
  id: string;
}
export interface QueryUserStatsArgs {
  id: string;
}
export interface QueryUserDetailsArgs {
  id: string;
}
export interface UserSummary {
  totalUsers: number;
  activeUsers: number;
  inactiveUsers: number;
  lastUpdated: Date | null | undefined;
}

export interface UserProfile {
  name: string;
  email: string;
  status: Status;
  profilePicture: string | null | undefined;
  bio: string | null | undefined;
  joinDate: Date | null | undefined;
  followers: number | null | undefined;
  following: number | null | undefined;
}

export interface UserStats {
  userId: string;
  postsCount: number;
  commentsCount: number;
  likesReceived: number;
  averageRating: number | null | undefined;
  isVerified: boolean;
  badges: string[];
  achievements: Array<string | null | undefined> | null | undefined;
}

export interface Address {
  street: string;
  city: string;
  state: string | null | undefined;
  zipCode: string;
  country: string;
}

export interface UserDetails {
  profile: UserProfile;
  address: Address | null | undefined;
  emergencyContact: UserProfile | null | undefined;
}

export enum Status {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
}
"
`;
