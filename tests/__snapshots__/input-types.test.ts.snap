// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Input Types & Arguments snapshots input type generation 1`] = `
"import { GraphQLResolveInfo, GraphQLScalarType } from "graphql";
import { Context } from "./context";

export interface Resolvers {
  Query: QueryResolvers;
  Mutation: MutationResolvers;
  User?: UserResolvers;
  Date: GraphQLScalarType;
  DateTime: GraphQLScalarType;
}

export type UnionResolvers = {};

export interface QueryResolvers {
  user: Resolver<{}, QueryUserArgs, User | null | undefined>;
  userByEmail: Resolver<{}, QueryUserByEmailArgs, User | null | undefined>;
  users: Resolver<{}, QueryUsersArgs, readonly User[]>;
  searchUsers: Resolver<{}, QuerySearchUsersArgs, readonly User[]>;
  getUsersInRange: Resolver<{}, QueryGetUsersInRangeArgs, readonly User[]>;
  usersByIds: Resolver<{}, QueryUsersByIdsArgs, readonly User[]>;
  usersByOptionalIds: Resolver<{}, QueryUsersByOptionalIdsArgs, readonly User[]>;
}

export interface MutationResolvers {
  createUser: Resolver<{}, MutationCreateUserArgs, User>;
  updateUser: Resolver<{}, MutationUpdateUserArgs, User>;
  createUserWithAddress: Resolver<{}, MutationCreateUserWithAddressArgs, User>;
}

export interface UserResolvers {
  id: Resolver<User, {}, string>;
  name: Resolver<User, {}, string>;
  email: Resolver<User, {}, string>;
  age: Resolver<User, {}, number | null | undefined>;
  birthday: Resolver<User, {}, Date | null | undefined>;
  status: Resolver<User, {}, Status | null | undefined>;
}

type MaybePromise<T> = T | Promise<T>;
export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: GraphQLResolveInfo) => MaybePromise<T>;

export type SubscriptionResolverFilter<R, A, T> = (
  root: R | undefined,
  args: A,
  ctx: Context,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;
export type SubscriptionResolver<R, A, T> = {
  subscribe: (root: R | undefined, args: A, ctx: Context, info: GraphQLResolveInfo) => AsyncIterator<T>;
};

export interface QueryUserArgs {
  id: string;
}
export interface QueryUserByEmailArgs {
  email: string;
}
export interface QueryUsersArgs {
  limit?: number | null | undefined;
  offset?: number | null | undefined;
}
export interface QuerySearchUsersArgs {
  filters?: SearchFilters | null | undefined;
}
export interface QueryGetUsersInRangeArgs {
  minAge: number;
  maxAge: number;
}
export interface QueryUsersByIdsArgs {
  ids: readonly string[];
}
export interface QueryUsersByOptionalIdsArgs {
  ids?: ReadonlyArray<string | null | undefined> | null | undefined;
}
export interface MutationCreateUserArgs {
  input: UserInput;
}
export interface MutationUpdateUserArgs {
  id: string;
  input: UpdateUserInput;
}
export interface MutationCreateUserWithAddressArgs {
  userInput: UserInput;
  addressInput: AddressInput;
  sendWelcomeEmail?: boolean | null | undefined;
}
export interface User {
  id: string;
  name: string;
  email: string;
  age: number | null | undefined;
  birthday: Date | null | undefined;
  status: Status | null | undefined;
}

export interface AddressInput {
  street: string;
  city: string;
  state?: string | null | undefined;
  zipCode?: string | null | undefined;
  country: string;
}

export interface UserInput {
  name: string;
  email: string;
  age?: number | null | undefined;
  birthday?: Date | null | undefined;
  status?: Status | null | undefined;
  isActive?: boolean | null | undefined;
  address?: AddressInput | null | undefined;
  tags?: string[] | null | undefined;
  optionalTags?: Array<string | null | undefined> | null | undefined;
  permissions: string[];
  metadata: Array<string | null | undefined>;
}

export interface UpdateUserInput {
  name?: string | null | undefined;
  email?: string | null | undefined;
  age?: number | null | undefined;
  status?: Status | null | undefined;
}

export interface SearchFilters {
  minAge?: number | null | undefined;
  maxAge?: number | null | undefined;
  statuses?: Status[] | null | undefined;
  isActive?: boolean | null | undefined;
}

export enum Status {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Pending = "PENDING",
}
"
`;
