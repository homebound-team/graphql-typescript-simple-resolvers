// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`GraphQL Subscriptions snapshots subscription generation 1`] = `
"import { GraphQLResolveInfo } from "graphql";
import { Context } from "./context";

export interface Resolvers {
  Query: QueryResolvers;
  Mutation: MutationResolvers;
  User?: UserResolvers;
  Post?: PostResolvers;
  Comment?: CommentResolvers;
  Subscription?: SubscriptionResolvers;
}

export type UnionResolvers = { ActivityItem: { __resolveType(o: Post | Comment): string } };

export interface QueryResolvers {
  users: Resolver<{}, {}, readonly User[]>;
  posts: Resolver<{}, {}, readonly Post[]>;
}

export interface MutationResolvers {
  createUser: Resolver<{}, MutationCreateUserArgs, User>;
  createPost: Resolver<{}, MutationCreatePostArgs, Post>;
  createComment: Resolver<{}, MutationCreateCommentArgs, Comment>;
}

export interface UserResolvers {
  id: Resolver<User, {}, string>;
  name: Resolver<User, {}, string>;
  email: Resolver<User, {}, string>;
}

export interface PostResolvers {
  id: Resolver<Post, {}, string>;
  title: Resolver<Post, {}, string>;
  author: Resolver<Post, {}, User>;
  content: Resolver<Post, {}, string>;
}

export interface CommentResolvers {
  id: Resolver<Comment, {}, string>;
  post: Resolver<Comment, {}, Post>;
  author: Resolver<Comment, {}, User>;
  text: Resolver<Comment, {}, string>;
}

export interface SubscriptionResolvers {
  userCreated: SubscriptionResolver<Subscription, {}, User>;
  postCreated: SubscriptionResolver<Subscription, SubscriptionPostCreatedArgs, Post>;
  newActivity: SubscriptionResolver<Subscription, {}, readonly ActivityItem[]>;
  commentsForPost: SubscriptionResolver<Subscription, SubscriptionCommentsForPostArgs, readonly Comment[]>;
  latestPost: SubscriptionResolver<Subscription, {}, Post | null | undefined>;
}

type MaybePromise<T> = T | Promise<T>;
export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: GraphQLResolveInfo) => MaybePromise<T>;

export type SubscriptionResolverFilter<R, A, T> = (
  root: R | undefined,
  args: A,
  ctx: Context,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;
export type SubscriptionResolver<R, A, T> = {
  subscribe: (root: R | undefined, args: A, ctx: Context, info: GraphQLResolveInfo) => AsyncIterator<T>;
};

export interface MutationCreateUserArgs {
  name: string;
  email: string;
}
export interface MutationCreatePostArgs {
  title: string;
  content: string;
  authorId: string;
}
export interface MutationCreateCommentArgs {
  postId: string;
  text: string;
  authorId: string;
}
export interface SubscriptionPostCreatedArgs {
  authorId?: string | null | undefined;
}
export interface SubscriptionCommentsForPostArgs {
  postId: string;
  authorId?: string | null | undefined;
}
export interface User {
  id: string;
  name: string;
  email: string;
}

export interface Post {
  id: string;
  title: string;
  author: User;
  content: string;
}

export interface Comment {
  id: string;
  post: Post;
  author: User;
  text: string;
}

export interface Subscription {
  userCreated: User;
  postCreated: Post;
  newActivity: ActivityItem[];
  commentsForPost: Comment[];
  latestPost: Post | null | undefined;
}

export type ActivityItem = Post | Comment;
"
`;
