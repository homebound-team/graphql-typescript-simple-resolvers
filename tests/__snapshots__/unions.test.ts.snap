// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Union Types snapshots union type generation 1`] = `
"import { GraphQLResolveInfo } from "graphql";
import { Context } from "./context";

export interface Resolvers {
  Query: QueryResolvers;
  Author?: AuthorResolvers;
  Book?: BookResolvers;
  Article?: ArticleResolvers;
  Container?: ContainerResolvers;
}

export type UnionResolvers = {
  SearchResult: { __resolveType(o: Author | Book): string };
  StringOrNumber: { __resolveType(o: String | Int): string };
  MixedUnion: { __resolveType(o: String | Boolean | Author): string };
  UnionOfUnions: { __resolveType(o: SearchResult | StringOrNumber): string };
};

export interface QueryResolvers {
  search: Resolver<{}, QuerySearchArgs, readonly SearchResult[]>;
  mixedSearch: Resolver<{}, {}, MixedUnion | null | undefined>;
  testNestedUnion: Resolver<{}, {}, UnionOfUnions | null | undefined>;
  getPrimitive: Resolver<{}, {}, StringOrNumber | null | undefined>;
}

export interface AuthorResolvers {
  id: Resolver<Author, {}, string>;
  name: Resolver<Author, {}, string>;
}

export interface BookResolvers {
  id: Resolver<Book, {}, string>;
  title: Resolver<Book, {}, string>;
}

export interface ArticleResolvers {
  id: Resolver<Article, {}, string>;
  headline: Resolver<Article, {}, string>;
}

export interface ContainerResolvers {
  optionalResult: Resolver<Container, {}, SearchResult | null | undefined>;
  requiredResult: Resolver<Container, {}, SearchResult>;
  optionalResults: Resolver<Container, {}, readonly SearchResult[] | null | undefined>;
  requiredResults: Resolver<Container, {}, readonly SearchResult[]>;
}

type MaybePromise<T> = T | Promise<T>;
export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: GraphQLResolveInfo) => MaybePromise<T>;

export type SubscriptionResolverFilter<R, A, T> = (
  root: R | undefined,
  args: A,
  ctx: Context,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>;
export type SubscriptionResolver<R, A, T> = {
  subscribe: (root: R | undefined, args: A, ctx: Context, info: GraphQLResolveInfo) => AsyncIterator<T>;
};

export interface QuerySearchArgs {
  query: string;
}
export interface Author {
  id: string;
  name: string;
}

export interface Book {
  id: string;
  title: string;
}

export interface Article {
  id: string;
  headline: string;
}

export interface Container {
  optionalResult: SearchResult | null | undefined;
  requiredResult: SearchResult;
  optionalResults: SearchResult[] | null | undefined;
  requiredResults: SearchResult[];
}

export type SearchResult = Author | Book;

export type StringOrNumber = string | number;

export type MixedUnion = string | boolean | Author;

export type UnionOfUnions = SearchResult | StringOrNumber;
"
`;
