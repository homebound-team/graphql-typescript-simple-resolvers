# An entity that will be a mapped typed
type Author implements HasName & FieldWithArgs {
  name: String!
  summary: AuthorSummary!
  popularity: Popularity!
  working: Working
  birthday: Date
  birthdayPartyScheduled: DateTime
  populate: Boolean
  field1(input: Boolean): Boolean
  books: [Book!]!
}

# A DTO that is just some fields
type AuthorSummary {
  numberOfBooks: Int!
  amountOfSales: Float
}

type Book implements HasName & FieldWithArgs {
  name: String!
  unionProp: UnionProp
  reqUnionProp: UnionProp!
  field1(input: Boolean): Boolean
  publisher: Publisher
}

interface HasName {
  name: String!
}

# Check that interfaces with args generate a single args type
interface FieldWithArgs {
  field1(input: Boolean): Boolean
}

# Example of type that uses fields with interfaces
type Container {
  thingOptional: HasName
  thingRequired: HasName!
  thingsOptional: [HasName!]
  thingsRequired: [HasName!]!
}

union UnionProp = String | Boolean

union SearchResult = Author | Book

union UnionOfUnions = UnionProp | SearchResult

union UnionWithPrimitives = String | Boolean | Author

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  authors(id: ID): [Author!]!
  authorSummaries: [AuthorSummary!]!
  search(query: String!): [SearchResult!]!
  testUnionOfUnions: UnionOfUnions
}

type Mutation {
  saveAuthor(input: AuthorInput!): SaveAuthorResult!
}

type Subscription {
  authorSaved: Author!
  searchSub(query: String!): [SearchResult!]!
}

type SaveAuthorResult {
  author: Author!
}

input AuthorInput {
  name: String
  bookIds: [ID!]
  bookIds2: [ID]
}

enum Popularity {
  Low
  High
}

enum Working {
  YES
  NO
}

scalar Date
scalar DateTime

interface Publisher {
  name: String
}

type LargePublisher implements Publisher {
  name: String
}